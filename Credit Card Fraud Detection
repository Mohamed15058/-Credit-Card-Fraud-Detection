{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2b7885c2",
   "metadata": {
    "papermill": {
     "duration": 0.008547,
     "end_time": "2025-01-19T08:56:01.735284",
     "exception": false,
     "start_time": "2025-01-19T08:56:01.726737",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ef3ba9b",
   "metadata": {
    "papermill": {
     "duration": 0.007548,
     "end_time": "2025-01-19T08:56:01.750895",
     "exception": false,
     "start_time": "2025-01-19T08:56:01.743347",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Problem statement:-\n",
    "The aim of the project is to predict fraudulent credit card transactions using machine learning models. This is crucial from the bank’s as well as customer’s perspective. The banks cannot afford to lose their customers’ money to fraudsters. Every fraud is a loss to the bank as the bank is responsible for the fraud transactions.\n",
    "\n",
    "The dataset contains transactions made over a period of two days in September 2013 by European credit cardholders. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions. We need to take care of the data imbalance while building the model and come up with the best model by trying various algorithms."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39b33c72",
   "metadata": {
    "papermill": {
     "duration": 0.007547,
     "end_time": "2025-01-19T08:56:01.766367",
     "exception": false,
     "start_time": "2025-01-19T08:56:01.758820",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Table of contents\n",
    "1. Import lib \n",
    "2. Import data\n",
    "3. Data analysis & Visualization\n",
    "4. Data Preprocessing\n",
    "5. Train &  Evaluate models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5175a886",
   "metadata": {
    "papermill": {
     "duration": 0.007539,
     "end_time": "2025-01-19T08:56:01.781771",
     "exception": false,
     "start_time": "2025-01-19T08:56:01.774232",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1- Import lib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a38082bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:01.799076Z",
     "iopub.status.busy": "2025-01-19T08:56:01.798691Z",
     "iopub.status.idle": "2025-01-19T08:56:04.347631Z",
     "shell.execute_reply": "2025-01-19T08:56:04.346634Z"
    },
    "papermill": {
     "duration": 2.559733,
     "end_time": "2025-01-19T08:56:04.349436",
     "exception": false,
     "start_time": "2025-01-19T08:56:01.789703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import lib\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from matplotlib import gridspec"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ac41407",
   "metadata": {
    "papermill": {
     "duration": 0.007547,
     "end_time": "2025-01-19T08:56:04.365066",
     "exception": false,
     "start_time": "2025-01-19T08:56:04.357519",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2- Import data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "96571365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:04.382193Z",
     "iopub.status.busy": "2025-01-19T08:56:04.381683Z",
     "iopub.status.idle": "2025-01-19T08:56:08.405621Z",
     "shell.execute_reply": "2025-01-19T08:56:08.404762Z"
    },
    "papermill": {
     "duration": 4.034736,
     "end_time": "2025-01-19T08:56:08.407548",
     "exception": false,
     "start_time": "2025-01-19T08:56:04.372812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"/kaggle/input/creditcardfraud/creditcard.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f94260d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:08.424905Z",
     "iopub.status.busy": "2025-01-19T08:56:08.424571Z",
     "iopub.status.idle": "2025-01-19T08:56:08.460016Z",
     "shell.execute_reply": "2025-01-19T08:56:08.459043Z"
    },
    "papermill": {
     "duration": 0.046092,
     "end_time": "2025-01-19T08:56:08.461770",
     "exception": false,
     "start_time": "2025-01-19T08:56:08.415678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>149.62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>2.69</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>378.66</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>123.50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798278</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>69.99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
       "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
       "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
       "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
       "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
       "4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n",
       "\n",
       "        V26       V27       V28  Amount  Class  \n",
       "0 -0.189115  0.133558 -0.021053  149.62      0  \n",
       "1  0.125895 -0.008983  0.014724    2.69      0  \n",
       "2 -0.139097 -0.055353 -0.059752  378.66      0  \n",
       "3 -0.221929  0.062723  0.061458  123.50      0  \n",
       "4  0.502292  0.219422  0.215153   69.99      0  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a10d3c37",
   "metadata": {
    "papermill": {
     "duration": 0.007983,
     "end_time": "2025-01-19T08:56:08.478249",
     "exception": false,
     "start_time": "2025-01-19T08:56:08.470266",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3-  Data analysis & Visualization\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67f64e2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:08.495729Z",
     "iopub.status.busy": "2025-01-19T08:56:08.495384Z",
     "iopub.status.idle": "2025-01-19T08:56:08.964507Z",
     "shell.execute_reply": "2025-01-19T08:56:08.963459Z"
    },
    "papermill": {
     "duration": 0.479883,
     "end_time": "2025-01-19T08:56:08.966318",
     "exception": false,
     "start_time": "2025-01-19T08:56:08.486435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>284807.000000</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>...</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>2.848070e+05</td>\n",
       "      <td>284807.000000</td>\n",
       "      <td>284807.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>94813.859575</td>\n",
       "      <td>1.175161e-15</td>\n",
       "      <td>3.369007e-16</td>\n",
       "      <td>-1.379537e-15</td>\n",
       "      <td>2.094852e-15</td>\n",
       "      <td>1.021879e-15</td>\n",
       "      <td>1.500885e-15</td>\n",
       "      <td>-5.620335e-16</td>\n",
       "      <td>1.149614e-16</td>\n",
       "      <td>-2.426963e-15</td>\n",
       "      <td>...</td>\n",
       "      <td>1.596686e-16</td>\n",
       "      <td>-3.576577e-16</td>\n",
       "      <td>2.650499e-16</td>\n",
       "      <td>4.472317e-15</td>\n",
       "      <td>5.109395e-16</td>\n",
       "      <td>1.686100e-15</td>\n",
       "      <td>-3.662399e-16</td>\n",
       "      <td>-1.225457e-16</td>\n",
       "      <td>88.349619</td>\n",
       "      <td>0.001727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>47488.145955</td>\n",
       "      <td>1.958696e+00</td>\n",
       "      <td>1.651309e+00</td>\n",
       "      <td>1.516255e+00</td>\n",
       "      <td>1.415869e+00</td>\n",
       "      <td>1.380247e+00</td>\n",
       "      <td>1.332271e+00</td>\n",
       "      <td>1.237094e+00</td>\n",
       "      <td>1.194353e+00</td>\n",
       "      <td>1.098632e+00</td>\n",
       "      <td>...</td>\n",
       "      <td>7.345240e-01</td>\n",
       "      <td>7.257016e-01</td>\n",
       "      <td>6.244603e-01</td>\n",
       "      <td>6.056471e-01</td>\n",
       "      <td>5.212781e-01</td>\n",
       "      <td>4.822270e-01</td>\n",
       "      <td>4.036325e-01</td>\n",
       "      <td>3.300833e-01</td>\n",
       "      <td>250.120109</td>\n",
       "      <td>0.041527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-5.640751e+01</td>\n",
       "      <td>-7.271573e+01</td>\n",
       "      <td>-4.832559e+01</td>\n",
       "      <td>-5.683171e+00</td>\n",
       "      <td>-1.137433e+02</td>\n",
       "      <td>-2.616051e+01</td>\n",
       "      <td>-4.355724e+01</td>\n",
       "      <td>-7.321672e+01</td>\n",
       "      <td>-1.343407e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.483038e+01</td>\n",
       "      <td>-1.093314e+01</td>\n",
       "      <td>-4.480774e+01</td>\n",
       "      <td>-2.836627e+00</td>\n",
       "      <td>-1.029540e+01</td>\n",
       "      <td>-2.604551e+00</td>\n",
       "      <td>-2.256568e+01</td>\n",
       "      <td>-1.543008e+01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>54201.500000</td>\n",
       "      <td>-9.203734e-01</td>\n",
       "      <td>-5.985499e-01</td>\n",
       "      <td>-8.903648e-01</td>\n",
       "      <td>-8.486401e-01</td>\n",
       "      <td>-6.915971e-01</td>\n",
       "      <td>-7.682956e-01</td>\n",
       "      <td>-5.540759e-01</td>\n",
       "      <td>-2.086297e-01</td>\n",
       "      <td>-6.430976e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.283949e-01</td>\n",
       "      <td>-5.423504e-01</td>\n",
       "      <td>-1.618463e-01</td>\n",
       "      <td>-3.545861e-01</td>\n",
       "      <td>-3.171451e-01</td>\n",
       "      <td>-3.269839e-01</td>\n",
       "      <td>-7.083953e-02</td>\n",
       "      <td>-5.295979e-02</td>\n",
       "      <td>5.600000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>84692.000000</td>\n",
       "      <td>1.810880e-02</td>\n",
       "      <td>6.548556e-02</td>\n",
       "      <td>1.798463e-01</td>\n",
       "      <td>-1.984653e-02</td>\n",
       "      <td>-5.433583e-02</td>\n",
       "      <td>-2.741871e-01</td>\n",
       "      <td>4.010308e-02</td>\n",
       "      <td>2.235804e-02</td>\n",
       "      <td>-5.142873e-02</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.945017e-02</td>\n",
       "      <td>6.781943e-03</td>\n",
       "      <td>-1.119293e-02</td>\n",
       "      <td>4.097606e-02</td>\n",
       "      <td>1.659350e-02</td>\n",
       "      <td>-5.213911e-02</td>\n",
       "      <td>1.342146e-03</td>\n",
       "      <td>1.124383e-02</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>139320.500000</td>\n",
       "      <td>1.315642e+00</td>\n",
       "      <td>8.037239e-01</td>\n",
       "      <td>1.027196e+00</td>\n",
       "      <td>7.433413e-01</td>\n",
       "      <td>6.119264e-01</td>\n",
       "      <td>3.985649e-01</td>\n",
       "      <td>5.704361e-01</td>\n",
       "      <td>3.273459e-01</td>\n",
       "      <td>5.971390e-01</td>\n",
       "      <td>...</td>\n",
       "      <td>1.863772e-01</td>\n",
       "      <td>5.285536e-01</td>\n",
       "      <td>1.476421e-01</td>\n",
       "      <td>4.395266e-01</td>\n",
       "      <td>3.507156e-01</td>\n",
       "      <td>2.409522e-01</td>\n",
       "      <td>9.104512e-02</td>\n",
       "      <td>7.827995e-02</td>\n",
       "      <td>77.165000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>172792.000000</td>\n",
       "      <td>2.454930e+00</td>\n",
       "      <td>2.205773e+01</td>\n",
       "      <td>9.382558e+00</td>\n",
       "      <td>1.687534e+01</td>\n",
       "      <td>3.480167e+01</td>\n",
       "      <td>7.330163e+01</td>\n",
       "      <td>1.205895e+02</td>\n",
       "      <td>2.000721e+01</td>\n",
       "      <td>1.559499e+01</td>\n",
       "      <td>...</td>\n",
       "      <td>2.720284e+01</td>\n",
       "      <td>1.050309e+01</td>\n",
       "      <td>2.252841e+01</td>\n",
       "      <td>4.584549e+00</td>\n",
       "      <td>7.519589e+00</td>\n",
       "      <td>3.517346e+00</td>\n",
       "      <td>3.161220e+01</td>\n",
       "      <td>3.384781e+01</td>\n",
       "      <td>25691.160000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Time            V1            V2            V3            V4  \\\n",
       "count  284807.000000  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
       "mean    94813.859575  1.175161e-15  3.369007e-16 -1.379537e-15  2.094852e-15   \n",
       "std     47488.145955  1.958696e+00  1.651309e+00  1.516255e+00  1.415869e+00   \n",
       "min         0.000000 -5.640751e+01 -7.271573e+01 -4.832559e+01 -5.683171e+00   \n",
       "25%     54201.500000 -9.203734e-01 -5.985499e-01 -8.903648e-01 -8.486401e-01   \n",
       "50%     84692.000000  1.810880e-02  6.548556e-02  1.798463e-01 -1.984653e-02   \n",
       "75%    139320.500000  1.315642e+00  8.037239e-01  1.027196e+00  7.433413e-01   \n",
       "max    172792.000000  2.454930e+00  2.205773e+01  9.382558e+00  1.687534e+01   \n",
       "\n",
       "                 V5            V6            V7            V8            V9  \\\n",
       "count  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
       "mean   1.021879e-15  1.500885e-15 -5.620335e-16  1.149614e-16 -2.426963e-15   \n",
       "std    1.380247e+00  1.332271e+00  1.237094e+00  1.194353e+00  1.098632e+00   \n",
       "min   -1.137433e+02 -2.616051e+01 -4.355724e+01 -7.321672e+01 -1.343407e+01   \n",
       "25%   -6.915971e-01 -7.682956e-01 -5.540759e-01 -2.086297e-01 -6.430976e-01   \n",
       "50%   -5.433583e-02 -2.741871e-01  4.010308e-02  2.235804e-02 -5.142873e-02   \n",
       "75%    6.119264e-01  3.985649e-01  5.704361e-01  3.273459e-01  5.971390e-01   \n",
       "max    3.480167e+01  7.330163e+01  1.205895e+02  2.000721e+01  1.559499e+01   \n",
       "\n",
       "       ...           V21           V22           V23           V24  \\\n",
       "count  ...  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
       "mean   ...  1.596686e-16 -3.576577e-16  2.650499e-16  4.472317e-15   \n",
       "std    ...  7.345240e-01  7.257016e-01  6.244603e-01  6.056471e-01   \n",
       "min    ... -3.483038e+01 -1.093314e+01 -4.480774e+01 -2.836627e+00   \n",
       "25%    ... -2.283949e-01 -5.423504e-01 -1.618463e-01 -3.545861e-01   \n",
       "50%    ... -2.945017e-02  6.781943e-03 -1.119293e-02  4.097606e-02   \n",
       "75%    ...  1.863772e-01  5.285536e-01  1.476421e-01  4.395266e-01   \n",
       "max    ...  2.720284e+01  1.050309e+01  2.252841e+01  4.584549e+00   \n",
       "\n",
       "                V25           V26           V27           V28         Amount  \\\n",
       "count  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  284807.000000   \n",
       "mean   5.109395e-16  1.686100e-15 -3.662399e-16 -1.225457e-16      88.349619   \n",
       "std    5.212781e-01  4.822270e-01  4.036325e-01  3.300833e-01     250.120109   \n",
       "min   -1.029540e+01 -2.604551e+00 -2.256568e+01 -1.543008e+01       0.000000   \n",
       "25%   -3.171451e-01 -3.269839e-01 -7.083953e-02 -5.295979e-02       5.600000   \n",
       "50%    1.659350e-02 -5.213911e-02  1.342146e-03  1.124383e-02      22.000000   \n",
       "75%    3.507156e-01  2.409522e-01  9.104512e-02  7.827995e-02      77.165000   \n",
       "max    7.519589e+00  3.517346e+00  3.161220e+01  3.384781e+01   25691.160000   \n",
       "\n",
       "               Class  \n",
       "count  284807.000000  \n",
       "mean        0.001727  \n",
       "std         0.041527  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%         0.000000  \n",
       "75%         0.000000  \n",
       "max         1.000000  \n",
       "\n",
       "[8 rows x 31 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b7378d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:08.985170Z",
     "iopub.status.busy": "2025-01-19T08:56:08.984788Z",
     "iopub.status.idle": "2025-01-19T08:56:09.036170Z",
     "shell.execute_reply": "2025-01-19T08:56:09.034940Z"
    },
    "papermill": {
     "duration": 0.062631,
     "end_time": "2025-01-19T08:56:09.037833",
     "exception": false,
     "start_time": "2025-01-19T08:56:08.975202",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 284807 entries, 0 to 284806\n",
      "Data columns (total 31 columns):\n",
      " #   Column  Non-Null Count   Dtype  \n",
      "---  ------  --------------   -----  \n",
      " 0   Time    284807 non-null  float64\n",
      " 1   V1      284807 non-null  float64\n",
      " 2   V2      284807 non-null  float64\n",
      " 3   V3      284807 non-null  float64\n",
      " 4   V4      284807 non-null  float64\n",
      " 5   V5      284807 non-null  float64\n",
      " 6   V6      284807 non-null  float64\n",
      " 7   V7      284807 non-null  float64\n",
      " 8   V8      284807 non-null  float64\n",
      " 9   V9      284807 non-null  float64\n",
      " 10  V10     284807 non-null  float64\n",
      " 11  V11     284807 non-null  float64\n",
      " 12  V12     284807 non-null  float64\n",
      " 13  V13     284807 non-null  float64\n",
      " 14  V14     284807 non-null  float64\n",
      " 15  V15     284807 non-null  float64\n",
      " 16  V16     284807 non-null  float64\n",
      " 17  V17     284807 non-null  float64\n",
      " 18  V18     284807 non-null  float64\n",
      " 19  V19     284807 non-null  float64\n",
      " 20  V20     284807 non-null  float64\n",
      " 21  V21     284807 non-null  float64\n",
      " 22  V22     284807 non-null  float64\n",
      " 23  V23     284807 non-null  float64\n",
      " 24  V24     284807 non-null  float64\n",
      " 25  V25     284807 non-null  float64\n",
      " 26  V26     284807 non-null  float64\n",
      " 27  V27     284807 non-null  float64\n",
      " 28  V28     284807 non-null  float64\n",
      " 29  Amount  284807 non-null  float64\n",
      " 30  Class   284807 non-null  int64  \n",
      "dtypes: float64(30), int64(1)\n",
      "memory usage: 67.4 MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8832910e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.056227Z",
     "iopub.status.busy": "2025-01-19T08:56:09.055825Z",
     "iopub.status.idle": "2025-01-19T08:56:09.061362Z",
     "shell.execute_reply": "2025-01-19T08:56:09.060369Z"
    },
    "papermill": {
     "duration": 0.016325,
     "end_time": "2025-01-19T08:56:09.062918",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.046593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(284807, 31)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6029514c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.081658Z",
     "iopub.status.busy": "2025-01-19T08:56:09.081281Z",
     "iopub.status.idle": "2025-01-19T08:56:09.118513Z",
     "shell.execute_reply": "2025-01-19T08:56:09.117474Z"
    },
    "papermill": {
     "duration": 0.048424,
     "end_time": "2025-01-19T08:56:09.120180",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.071756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time      0\n",
       "V1        0\n",
       "V2        0\n",
       "V3        0\n",
       "V4        0\n",
       "V5        0\n",
       "V6        0\n",
       "V7        0\n",
       "V8        0\n",
       "V9        0\n",
       "V10       0\n",
       "V11       0\n",
       "V12       0\n",
       "V13       0\n",
       "V14       0\n",
       "V15       0\n",
       "V16       0\n",
       "V17       0\n",
       "V18       0\n",
       "V19       0\n",
       "V20       0\n",
       "V21       0\n",
       "V22       0\n",
       "V23       0\n",
       "V24       0\n",
       "V25       0\n",
       "V26       0\n",
       "V27       0\n",
       "V28       0\n",
       "Amount    0\n",
       "Class     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ae701fe7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.139199Z",
     "iopub.status.busy": "2025-01-19T08:56:09.138811Z",
     "iopub.status.idle": "2025-01-19T08:56:09.148621Z",
     "shell.execute_reply": "2025-01-19T08:56:09.147586Z"
    },
    "papermill": {
     "duration": 0.020886,
     "end_time": "2025-01-19T08:56:09.150147",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.129261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Class\n",
       "0    284315\n",
       "1       492\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Determine number of fraud cases in dataset\n",
    "data['Class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d08bb949",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.169952Z",
     "iopub.status.busy": "2025-01-19T08:56:09.169548Z",
     "iopub.status.idle": "2025-01-19T08:56:09.175237Z",
     "shell.execute_reply": "2025-01-19T08:56:09.174250Z"
    },
    "papermill": {
     "duration": 0.017122,
     "end_time": "2025-01-19T08:56:09.176812",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.159690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "284807"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8156e63d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.196298Z",
     "iopub.status.busy": "2025-01-19T08:56:09.195864Z",
     "iopub.status.idle": "2025-01-19T08:56:09.205255Z",
     "shell.execute_reply": "2025-01-19T08:56:09.204198Z"
    },
    "papermill": {
     "duration": 0.020923,
     "end_time": "2025-01-19T08:56:09.206932",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.186009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Class\n",
       "0    99.827251\n",
       "1     0.172749\n",
       "Name: count, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['Class'].value_counts() * 100 / len(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "638cabc7",
   "metadata": {
    "papermill": {
     "duration": 0.010276,
     "end_time": "2025-01-19T08:56:09.226562",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.216286",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4- Data Preprocessing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "308852a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.246070Z",
     "iopub.status.busy": "2025-01-19T08:56:09.245720Z",
     "iopub.status.idle": "2025-01-19T08:56:09.285968Z",
     "shell.execute_reply": "2025-01-19T08:56:09.284733Z"
    },
    "papermill": {
     "duration": 0.052075,
     "end_time": "2025-01-19T08:56:09.287890",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.235815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Determine number of fraud cases in dataset\n",
    "fraud = data[data['Class'] == 1]\n",
    "valid = data[data['Class'] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "09106f7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.307504Z",
     "iopub.status.busy": "2025-01-19T08:56:09.307185Z",
     "iopub.status.idle": "2025-01-19T08:56:09.316948Z",
     "shell.execute_reply": "2025-01-19T08:56:09.315943Z"
    },
    "papermill": {
     "duration": 0.021164,
     "end_time": "2025-01-19T08:56:09.318404",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.297240",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Amount details of the fraudulent transaction \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count     492.000000\n",
       "mean      122.211321\n",
       "std       256.683288\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         9.250000\n",
       "75%       105.890000\n",
       "max      2125.870000\n",
       "Name: Amount, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Amount details of the fraudulent transaction ')\n",
    "fraud.Amount.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3ada560b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.338002Z",
     "iopub.status.busy": "2025-01-19T08:56:09.337628Z",
     "iopub.status.idle": "2025-01-19T08:56:09.359491Z",
     "shell.execute_reply": "2025-01-19T08:56:09.358481Z"
    },
    "papermill": {
     "duration": 0.033521,
     "end_time": "2025-01-19T08:56:09.361179",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.327658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "details of valid transaction\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count    284315.000000\n",
       "mean         88.291022\n",
       "std         250.105092\n",
       "min           0.000000\n",
       "25%           5.650000\n",
       "50%          22.000000\n",
       "75%          77.050000\n",
       "max       25691.160000\n",
       "Name: Amount, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"details of valid transaction\")\n",
    "valid.Amount.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a4b20bf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.381499Z",
     "iopub.status.busy": "2025-01-19T08:56:09.381096Z",
     "iopub.status.idle": "2025-01-19T08:56:09.626286Z",
     "shell.execute_reply": "2025-01-19T08:56:09.625244Z"
    },
    "papermill": {
     "duration": 0.257025,
     "end_time": "2025-01-19T08:56:09.627783",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.370758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Class', ylabel='count'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Class', data=data, palette='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0bd37307",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:09.648997Z",
     "iopub.status.busy": "2025-01-19T08:56:09.648632Z",
     "iopub.status.idle": "2025-01-19T08:56:10.976258Z",
     "shell.execute_reply": "2025-01-19T08:56:10.974992Z"
    },
    "papermill": {
     "duration": 1.340027,
     "end_time": "2025-01-19T08:56:10.977914",
     "exception": false,
     "start_time": "2025-01-19T08:56:09.637887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 900x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correlation matrix\n",
    "corrmat = data.corr()\n",
    "fig = plt.figure(figsize = (9, 6))\n",
    "sns.heatmap(corrmat, vmax = .8, square = True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5a7d6448",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:11.001482Z",
     "iopub.status.busy": "2025-01-19T08:56:11.001096Z",
     "iopub.status.idle": "2025-01-19T08:56:11.031850Z",
     "shell.execute_reply": "2025-01-19T08:56:11.030599Z"
    },
    "papermill": {
     "duration": 0.043995,
     "end_time": "2025-01-19T08:56:11.033384",
     "exception": false,
     "start_time": "2025-01-19T08:56:10.989389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(284807, 30)\n",
      "(284807,)\n"
     ]
    }
   ],
   "source": [
    "# spilting   the X and the Y from the dataset\n",
    "X = data.drop(['Class'], axis = 1)\n",
    "Y = data[\"Class\"]\n",
    "print(X.shape)\n",
    "print(Y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f7b827e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:11.056378Z",
     "iopub.status.busy": "2025-01-19T08:56:11.055978Z",
     "iopub.status.idle": "2025-01-19T08:56:11.401506Z",
     "shell.execute_reply": "2025-01-19T08:56:11.400564Z"
    },
    "papermill": {
     "duration": 0.358948,
     "end_time": "2025-01-19T08:56:11.403381",
     "exception": false,
     "start_time": "2025-01-19T08:56:11.044433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#split data into training and testing sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "xTrain, xTest, yTrain, yTest = train_test_split(\n",
    "        X, Y, test_size = 0.2, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e58be6f0",
   "metadata": {
    "papermill": {
     "duration": 0.010336,
     "end_time": "2025-01-19T08:56:11.424809",
     "exception": false,
     "start_time": "2025-01-19T08:56:11.414473",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5- Train  & Evaluate Models\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cae0af5",
   "metadata": {
    "papermill": {
     "duration": 0.010413,
     "end_time": "2025-01-19T08:56:11.446005",
     "exception": false,
     "start_time": "2025-01-19T08:56:11.435592",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5.1 RanRandomForestClassifie"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "db213886",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T08:56:11.469424Z",
     "iopub.status.busy": "2025-01-19T08:56:11.469042Z",
     "iopub.status.idle": "2025-01-19T09:00:51.784058Z",
     "shell.execute_reply": "2025-01-19T09:00:51.782942Z"
    },
    "papermill": {
     "duration": 280.340137,
     "end_time": "2025-01-19T09:00:51.796930",
     "exception": false,
     "start_time": "2025-01-19T08:56:11.456793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "RFC = RandomForestClassifier()\n",
    "RFC.fit(xTrain, yTrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ef41bfae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:51.820900Z",
     "iopub.status.busy": "2025-01-19T09:00:51.820539Z",
     "iopub.status.idle": "2025-01-19T09:00:52.473101Z",
     "shell.execute_reply": "2025-01-19T09:00:52.472043Z"
    },
    "papermill": {
     "duration": 0.666674,
     "end_time": "2025-01-19T09:00:52.474870",
     "exception": false,
     "start_time": "2025-01-19T09:00:51.808196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, ..., 0, 0, 0])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yPred = RFC.predict(xTest)\n",
    "yPred "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2807fb20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:52.498725Z",
     "iopub.status.busy": "2025-01-19T09:00:52.498370Z",
     "iopub.status.idle": "2025-01-19T09:00:52.505102Z",
     "shell.execute_reply": "2025-01-19T09:00:52.504251Z"
    },
    "papermill": {
     "duration": 0.020447,
     "end_time": "2025-01-19T09:00:52.506709",
     "exception": false,
     "start_time": "2025-01-19T09:00:52.486262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43428     1\n",
       "49906     0\n",
       "29474     0\n",
       "276481    0\n",
       "278846    0\n",
       "         ..\n",
       "75723     0\n",
       "252263    0\n",
       "221246    0\n",
       "81910     0\n",
       "59490     0\n",
       "Name: Class, Length: 56962, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yTest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "acf73c39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:52.530466Z",
     "iopub.status.busy": "2025-01-19T09:00:52.530081Z",
     "iopub.status.idle": "2025-01-19T09:00:52.534110Z",
     "shell.execute_reply": "2025-01-19T09:00:52.533247Z"
    },
    "papermill": {
     "duration": 0.017649,
     "end_time": "2025-01-19T09:00:52.535759",
     "exception": false,
     "start_time": "2025-01-19T09:00:52.518110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix ,matthews_corrcoef"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2ac13984",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:52.559932Z",
     "iopub.status.busy": "2025-01-19T09:00:52.559600Z",
     "iopub.status.idle": "2025-01-19T09:00:52.570360Z",
     "shell.execute_reply": "2025-01-19T09:00:52.569393Z"
    },
    "papermill": {
     "duration": 0.024581,
     "end_time": "2025-01-19T09:00:52.572046",
     "exception": false,
     "start_time": "2025-01-19T09:00:52.547465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9995962220427653"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(yTest, yPred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "53137227",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:52.596334Z",
     "iopub.status.busy": "2025-01-19T09:00:52.595956Z",
     "iopub.status.idle": "2025-01-19T09:00:52.609414Z",
     "shell.execute_reply": "2025-01-19T09:00:52.608445Z"
    },
    "papermill": {
     "duration": 0.027194,
     "end_time": "2025-01-19T09:00:52.610900",
     "exception": false,
     "start_time": "2025-01-19T09:00:52.583706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[56862,     2],\n",
       "       [   21,    77]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(yTest, yPred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5f308df6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:52.635427Z",
     "iopub.status.busy": "2025-01-19T09:00:52.635057Z",
     "iopub.status.idle": "2025-01-19T09:00:52.715319Z",
     "shell.execute_reply": "2025-01-19T09:00:52.714095Z"
    },
    "papermill": {
     "duration": 0.09446,
     "end_time": "2025-01-19T09:00:52.716982",
     "exception": false,
     "start_time": "2025-01-19T09:00:52.622522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56864\n",
      "           1       0.97      0.79      0.87        98\n",
      "\n",
      "    accuracy                           1.00     56962\n",
      "   macro avg       0.99      0.89      0.93     56962\n",
      "weighted avg       1.00      1.00      1.00     56962\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(yTest, yPred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "dc176ca6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:52.742938Z",
     "iopub.status.busy": "2025-01-19T09:00:52.742579Z",
     "iopub.status.idle": "2025-01-19T09:00:52.764333Z",
     "shell.execute_reply": "2025-01-19T09:00:52.763246Z"
    },
    "papermill": {
     "duration": 0.037006,
     "end_time": "2025-01-19T09:00:52.766005",
     "exception": false,
     "start_time": "2025-01-19T09:00:52.728999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8749276812909632"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MCC = matthews_corrcoef(yTest, yPred)\n",
    "MCC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "64a23f34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:52.790887Z",
     "iopub.status.busy": "2025-01-19T09:00:52.790544Z",
     "iopub.status.idle": "2025-01-19T09:00:52.994767Z",
     "shell.execute_reply": "2025-01-19T09:00:52.993482Z"
    },
    "papermill": {
     "duration": 0.219024,
     "end_time": "2025-01-19T09:00:52.996812",
     "exception": false,
     "start_time": "2025-01-19T09:00:52.777788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# printing the confusion matrix\n",
    "LABELS = ['Normal', 'Fraud']\n",
    "conf_matrix = confusion_matrix(yTest, yPred)\n",
    "plt.figure(figsize =(6, 6))\n",
    "sns.heatmap(conf_matrix, xticklabels = LABELS, \n",
    "            yticklabels = LABELS, annot = True, fmt =\"d\");\n",
    "plt.title(\"Confusion matrix\")\n",
    "plt.ylabel('True class')\n",
    "plt.xlabel('Predicted class')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20041b83",
   "metadata": {
    "papermill": {
     "duration": 0.012044,
     "end_time": "2025-01-19T09:00:53.021689",
     "exception": false,
     "start_time": "2025-01-19T09:00:53.009645",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5.2 XGBClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3496d95a",
   "metadata": {
    "papermill": {
     "duration": 0.01192,
     "end_time": "2025-01-19T09:00:53.045777",
     "exception": false,
     "start_time": "2025-01-19T09:00:53.033857",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## XGBClassifier is significantly faster  and the different between accuracy for XGB but very litte difference up to .00001  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "61efa319",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:00:53.071310Z",
     "iopub.status.busy": "2025-01-19T09:00:53.070929Z",
     "iopub.status.idle": "2025-01-19T09:01:05.882257Z",
     "shell.execute_reply": "2025-01-19T09:01:05.881199Z"
    },
    "papermill": {
     "duration": 12.826029,
     "end_time": "2025-01-19T09:01:05.883928",
     "exception": false,
     "start_time": "2025-01-19T09:00:53.057899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=1000, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=1000, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=1000, n_jobs=None,\n",
       "              num_parallel_tree=None, random_state=None, ...)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import XGBClassifier\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "XGBC = XGBClassifier(n_estimators=1000)\n",
    "\n",
    "XGBC.fit(xTrain, yTrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0d386a75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:05.910559Z",
     "iopub.status.busy": "2025-01-19T09:01:05.910126Z",
     "iopub.status.idle": "2025-01-19T09:01:06.192571Z",
     "shell.execute_reply": "2025-01-19T09:01:06.190103Z"
    },
    "papermill": {
     "duration": 0.297834,
     "end_time": "2025-01-19T09:01:06.194451",
     "exception": false,
     "start_time": "2025-01-19T09:01:05.896617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, ..., 0, 0, 0])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yPredxgb = XGBC.predict(xTest)\n",
    "yPredxgb "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "444ed38b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:06.278361Z",
     "iopub.status.busy": "2025-01-19T09:01:06.277967Z",
     "iopub.status.idle": "2025-01-19T09:01:06.284556Z",
     "shell.execute_reply": "2025-01-19T09:01:06.283731Z"
    },
    "papermill": {
     "duration": 0.021576,
     "end_time": "2025-01-19T09:01:06.285971",
     "exception": false,
     "start_time": "2025-01-19T09:01:06.264395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43428     1\n",
       "49906     0\n",
       "29474     0\n",
       "276481    0\n",
       "278846    0\n",
       "         ..\n",
       "75723     0\n",
       "252263    0\n",
       "221246    0\n",
       "81910     0\n",
       "59490     0\n",
       "Name: Class, Length: 56962, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yTest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "9c6c98a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:06.313180Z",
     "iopub.status.busy": "2025-01-19T09:01:06.312797Z",
     "iopub.status.idle": "2025-01-19T09:01:06.317288Z",
     "shell.execute_reply": "2025-01-19T09:01:06.316226Z"
    },
    "papermill": {
     "duration": 0.019961,
     "end_time": "2025-01-19T09:01:06.318882",
     "exception": false,
     "start_time": "2025-01-19T09:01:06.298921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix ,matthews_corrcoef"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bbb97d5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:06.345971Z",
     "iopub.status.busy": "2025-01-19T09:01:06.345632Z",
     "iopub.status.idle": "2025-01-19T09:01:06.355451Z",
     "shell.execute_reply": "2025-01-19T09:01:06.354501Z"
    },
    "papermill": {
     "duration": 0.024898,
     "end_time": "2025-01-19T09:01:06.356941",
     "exception": false,
     "start_time": "2025-01-19T09:01:06.332043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9995786664794073"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(yTest, yPredxgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "37212865",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:06.384195Z",
     "iopub.status.busy": "2025-01-19T09:01:06.383826Z",
     "iopub.status.idle": "2025-01-19T09:01:06.397312Z",
     "shell.execute_reply": "2025-01-19T09:01:06.396320Z"
    },
    "papermill": {
     "duration": 0.028785,
     "end_time": "2025-01-19T09:01:06.398845",
     "exception": false,
     "start_time": "2025-01-19T09:01:06.370060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[56861,     3],\n",
       "       [   21,    77]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(yTest, yPredxgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "379c364a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:06.425864Z",
     "iopub.status.busy": "2025-01-19T09:01:06.425520Z",
     "iopub.status.idle": "2025-01-19T09:01:06.504371Z",
     "shell.execute_reply": "2025-01-19T09:01:06.503081Z"
    },
    "papermill": {
     "duration": 0.094501,
     "end_time": "2025-01-19T09:01:06.506217",
     "exception": false,
     "start_time": "2025-01-19T09:01:06.411716",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     56864\n",
      "           1       0.96      0.79      0.87        98\n",
      "\n",
      "    accuracy                           1.00     56962\n",
      "   macro avg       0.98      0.89      0.93     56962\n",
      "weighted avg       1.00      1.00      1.00     56962\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(yTest, yPredxgb))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "fd8ac354",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:06.533566Z",
     "iopub.status.busy": "2025-01-19T09:01:06.533203Z",
     "iopub.status.idle": "2025-01-19T09:01:06.554906Z",
     "shell.execute_reply": "2025-01-19T09:01:06.553943Z"
    },
    "papermill": {
     "duration": 0.037307,
     "end_time": "2025-01-19T09:01:06.556667",
     "exception": false,
     "start_time": "2025-01-19T09:01:06.519360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8694303688259544"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MCC = matthews_corrcoef(yTest, yPredxgb)\n",
    "MCC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4b8b5f2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-19T09:01:06.584573Z",
     "iopub.status.busy": "2025-01-19T09:01:06.584224Z",
     "iopub.status.idle": "2025-01-19T09:01:06.791087Z",
     "shell.execute_reply": "2025-01-19T09:01:06.789987Z"
    },
    "papermill": {
     "duration": 0.223232,
     "end_time": "2025-01-19T09:01:06.793059",
     "exception": false,
     "start_time": "2025-01-19T09:01:06.569827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# printing the confusion matrix\n",
    "LABELS = ['Normal', 'Fraud']\n",
    "conf_matrix = confusion_matrix(yTest, yPredxgb)\n",
    "plt.figure(figsize =(6, 6))\n",
    "sns.heatmap(conf_matrix, xticklabels = LABELS, \n",
    "            yticklabels = LABELS, annot = True, fmt =\"d\");\n",
    "plt.title(\"Confusion matrix\")\n",
    "plt.ylabel('True class')\n",
    "plt.xlabel('Predicted class')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 310,
     "sourceId": 23498,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30839,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 308.603642,
   "end_time": "2025-01-19T09:01:07.628250",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-19T08:55:59.024608",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
